[
  
  {
    "title": "퀴즈 사이트 만들기_4 (next.js)",
    "url": "/posts/Quiz_project_4/",
    "categories": "MacOs, Next.js, javascript",
    "tags": "Quiz_project",
    "date": "2023-08-11 11:33:00 +0900",
    





    
    "snippet": "시작하며지난 시간에는 퀴즈 풀기 페이지, 회원기능 , DB를 이용한 회원아이디 저장 등의 기능을 만들었다.이번 시간에는 순위판 페이지를 완성시키고, AWS에 파일을 업로드할 것이다.순위판 구성순위가 높은 순서대로 자료를 출력하기 위해 mongodb에서 데이터를 가져올때, sort()함수를 이용합니다.sort함수를 사용하면 특정 자료의 값에 따라 오름차...",
    "content": "시작하며지난 시간에는 퀴즈 풀기 페이지, 회원기능 , DB를 이용한 회원아이디 저장 등의 기능을 만들었다.이번 시간에는 순위판 페이지를 완성시키고, AWS에 파일을 업로드할 것이다.순위판 구성순위가 높은 순서대로 자료를 출력하기 위해 mongodb에서 데이터를 가져올때, sort()함수를 이용합니다.sort함수를 사용하면 특정 자료의 값에 따라 오름차순/내림차순의 순서대로 가져올 수 있게 해줍니다.저는 result값 (점수)가 높은 순서대로 자료를 출력하게 했습니다.import { connectDB } from \"/Users/jyp/Documents/GitHub/quiz_project/src/util/db.js\";import \"./style.css\";export default async function Ranking() {  const client = await connectDB;  const db = client.db(\"Score\");  let result = await db.collection(\"userscore\").find().sort({ result: -1 }).toArray();  return (    &lt;div className=\"list\"&gt;      &lt;h1&gt;순위판&lt;/h1&gt;      {result.map((a, i) =&gt; (        &lt;div className=\"container\"&gt;          &lt;div className=\"text\"&gt; {i + 1} 위&lt;/div&gt;          &lt;div className=\"text\"&gt;이름 : {result[i].user}&lt;/div&gt;          &lt;div className=\"text\"&gt;점수 : {result[i].result}&lt;/div&gt;        &lt;/div&gt;      ))}    &lt;/div&gt;  );}이렇게 해서 간단히 순위판 기능을 완성했습니다. 순위판에 작성된 사람이 많아지면, 다음 페이지에서 조회하는 기능은일단 AWS에 이 프로젝트를 업로드한 뒤에 수정해보겠습니다.프로젝트 빌드하기npm run build빌드를 마치면 터미널에 이러한 창이 뜨게 됩니다.λ 기호가 들어가 있는 페이지는 dynamic 렌더링으로, 페이지에 접속할때마다 새로운 html을 띄워주는 라우팅 방식이고,○ 기호가 들어가 있는 페이지는 static 렌더링으로, 계속 고정적으로 띄워주는 페이지입니다.저희는 로그인, 로그아웃 레이아웃을 모든 페이지에 띄워 놓고 있으므로, 모두 dynamic 렌더링을 사용해주어야 합니다.빌드된 프로젝트의 파일을 테스트하기 위해서는 밑의 명령어를 실행해보면 됩니다. 지금까지 사용했던 npm run dev는 테스트용이고,지금 현재 이 명령어는 실제 서버에서 띄워주는 페이지랑 같습니다.npm run startAWS 업로드확인해보고 이상이 없으면 AWS에 업로드를 시작해봅시다."
  },
  
  {
    "title": "퀴즈 사이트 만들기_3 (next.js)",
    "url": "/posts/Quiz_project_3/",
    "categories": "MacOs, Next.js, javascript",
    "tags": "Quiz_project",
    "date": "2023-08-02 11:33:00 +0900",
    





    
    "snippet": "시작하며지난 포스팅에서는 퀴즈 만들기 페이지와, API까지 완성시켰다. 이번 포스팅에서는퀴즈 풀기 기능을 완성시켜볼 예정이다.퀴즈 풀기 페이지 구성하기페이지 구성가장 먼저 퀴즈 풀기 버튼을 누르면, 문제의 카테고리를 선택할 수 있는 창을 만들어주겠습니다.아직 한국사 문제밖에 없지만, 새로운 카테고리가 생길수도 있기때문에 만들어놓겠습니다.//src/ap...",
    "content": "시작하며지난 포스팅에서는 퀴즈 만들기 페이지와, API까지 완성시켰다. 이번 포스팅에서는퀴즈 풀기 기능을 완성시켜볼 예정이다.퀴즈 풀기 페이지 구성하기페이지 구성가장 먼저 퀴즈 풀기 버튼을 누르면, 문제의 카테고리를 선택할 수 있는 창을 만들어주겠습니다.아직 한국사 문제밖에 없지만, 새로운 카테고리가 생길수도 있기때문에 만들어놓겠습니다.//src/app/quiz/page.jsimport \"./style.css\";export default function Quiz() {  return (    &lt;div className=\"container\"&gt;      &lt;a href={\"/quiz_h\"} className=\"button\"&gt;        한국사 문제풀기      &lt;/a&gt;    &lt;/div&gt;  );}/* src/app/quiz/style.css */.container {  display: flex;  justify-content: center;  align-items: center;  height: 100vh;}.button {  display: inline-block;  padding: 10px 20px;  border: 1px solid #ccc;  border-radius: 4px;  text-decoration: none;  color: #333;  font-size: 16px;}그러고 나서 이제 이 프로젝트의 핵심 페이지인 퀴즈 풀기 기능을 만들어 보겠습니다.//src/app/quiz_h/page.jsexport default async function Quiz_h() {  const client = await connectDB;  const db = client.db(\"Quiz_Data\"); //mongodb 불러오기  let NumberOfQuestion = await db.collection(\"Quiz\").count(); //Quiz collection 안에 있는 데이터의 개수 불러오기  let result = await db.collection(\"Quiz\").find().toArray(); //Quiz collection 안에 있는 모든 데이터 불러오기  //_id를 문자열로 변환  result = result.map((a) =&gt; {    a._id = a._id.toString();    return a;  });  //DB에 저장되어있는 문제 개수만큼 숫자 생성  const numbers = [];  for (let i = 0; i &lt; NumberOfQuestion; i++) {    numbers.push(i);  }  //숫자 중 랜덤한 20개의 숫자 추출  const answer = [];  for (let n = 0; n &lt; 20; n++) {    const index = Math.floor(Math.random() * numbers.length);    answer.push(numbers[index]);    numbers.splice(index, 1);  }  return (    {/*20개의 랜덤 숫자와 DB자료 client 컴포넌트에 전송*/}    &lt;&gt;      &lt;Util answer={answer} result={result}&gt;&lt;/Util&gt;    &lt;/&gt;  );}//src/app/quiz_h/util.jsexport default async function Util({ result, answer }) {  //체크박스 하나만 체크되게 하기  const onlyone = (checkThis) =&gt; {    const checkboxes = document.getElementsByClassName(\"q\");    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i] !== checkThis) {        checkboxes[i].checked = false;      }    }  };  useEffect(() =&gt; {    // 변수/상수 선언    const outer = document.querySelector(\".outer\");    const innerList = document.querySelector(\".inner-list\");    const inners = document.querySelectorAll(\".inner\");    const loading = document.getElementById(\"load\");    const buttonRight = document.querySelector(\".button-right\");    const showScore = document.querySelector(\"#score\");    const showResult = document.querySelector(\".black-bg\");    const submitButton = document.querySelector(\".submitButton\");    var count = 0;    var score = 0;    var IsitCorrect = new Object();    //다음문제 버튼을 클릭하였을시 실행되는 함수    buttonRight.addEventListener(\"click\", () =&gt; {      const parentComponent = document.getElementById(count);      const countCheckbox = parentComponent.querySelectorAll('input[type=\"checkbox\"]');      let isChecked = false;      // 모든 체크박스를 반복하며 체크 상태를 확인합니다.      for (let i = 0; i &lt; countCheckbox.length; i++) {        if (countCheckbox[i].checked) {          isChecked = true;          break; // 하나라도 체크되어 있으면 루프를 종료합니다.        }      }      //하나도 체크되어 있지 않다면      if (!isChecked) {        alert(\"체크박스를 체크하여 정답을 선택하세요!\");      }      //그렇지 않으면      else {        //다음 문제로 넘기기        currentIndex++;        currentIndex = currentIndex &gt;= inners.length ? inners.length - 1 : currentIndex;        innerList.style.marginLeft = `-${outer.clientWidth * currentIndex}px`;        //체크된 체크박스값 보기        const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]:checked');        const checkedValues = Array.from(checkboxes).map((checkbox) =&gt; checkbox.value);        //19번째 문제에 도달했을때, 20번째 문제의 버튼은 '제출'로 보이게 하기        if (count &gt;= 18) {          buttonRight.innerText = \"제출\";        }        //마지막 문제까지 제출하면, 결과 보여주기        if (count == 19) {          showResult.classList.add(\"show-modal\");        }        //체크박스에 입력한 문제가 정답이라면 answer에 1을 넣고, 스코어 추가        else if (checkedValues == result[answer[count]].a) {          IsitCorrect[\"answer\" + count] = 1;          score++;          showScore.innerText = `${score * 5}`;        }        //오답시 answer에 0을 넣기        else {          IsitCorrect[\"answer\" + count] = 0;        }        //카운트 추가        count++;      }    });    //마지막 제출버튼 눌렀을때 api/result로 POST 요청 (fetchAPI)    submitButton.addEventListener(\"click\", async () =&gt; {      console.log(IsitCorrect);      IsitCorrect[\"result\"] = score * 5;      await fetch(\"/api/result\", {        method: \"POST\",        body: JSON.stringify(IsitCorrect),      }).then(() =&gt; {        console.log(\"success\");        alert(\"제출완료\");      });    });    //문제 개수만큼 div박스 늘리기    let currentIndex = 0;    if (outer &amp;&amp; innerList &amp;&amp; inners) {      inners.forEach((inner) =&gt; {        inner.style.width = `${outer.clientWidth}px`;      });      innerList.style.width = `${outer.clientWidth * inners.length}px`;    }    //로딩이 완료되면 로딩창 숨기기    const onPageLoad = () =&gt; {      loading.style.display = \"none\";    };    document.onreadystatechange = function () {      if (document.readyState === \"complete\") {        onPageLoad();      } else {        window.addEventListener(\"load\", onPageLoad, false);        // Remove the event listener when component unmounts        return () =&gt; window.removeEventListener(\"load\", onPageLoad);      }    };  }, []);  return (    &lt;&gt;      &lt;div id=\"load\"&gt;        &lt;LoadingPage&gt;&lt;/LoadingPage&gt;      &lt;/div&gt;      &lt;div className=\"black-bg\"&gt;        &lt;div className=\"white-bg\"&gt;          &lt;div className=\"my-score\"&gt;            &lt;h1&gt;당신의 점수는&lt;/h1&gt;            &lt;h1 id=\"score\"&gt;&lt;/h1&gt;            &lt;h1&gt;점 입니다.&lt;/h1&gt;            &lt;button className=\"submitButton btn \"&gt;결과 제출하기&lt;/button&gt;            &lt;a href=\"/\" className=\"submitButton btn \"&gt;              돌아가기            &lt;/a&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div className=\"outer\"&gt;        &lt;div className=\"inner-list\"&gt;          {answer.map((a, i) =&gt; (            &lt;div key={a} id={i}&gt;              &lt;div className=\"inner\"&gt;                &lt;h1 className=\"question\"&gt;                  {i + 1}번문제) {result[a].q}                &lt;/h1&gt;                &lt;div className=\"contentbox\"&gt;                  &lt;div className=\"content\"&gt;{result[a].c1}&lt;/div&gt;                  &lt;input                    type=\"checkbox\"                    value={\"1\"}                    className=\"q\"                    name={i}                    onChange={(e) =&gt; onlyone(e.target)}                  &gt;&lt;/input&gt;                &lt;/div&gt;                &lt;div className=\"contentbox\"&gt;                  &lt;div className=\"content\"&gt;{result[a].c2}&lt;/div&gt;                  &lt;input                    type=\"checkbox\"                    value={\"2\"}                    className=\"q\"                    name={i}                    onChange={(e) =&gt; onlyone(e.target)}                  &gt;&lt;/input&gt;                &lt;/div&gt;                &lt;div className=\"contentbox\"&gt;                  &lt;div className=\"content\"&gt;{result[a].c3}&lt;/div&gt;                  &lt;input                    type=\"checkbox\"                    value={\"3\"}                    className=\"q\"                    name={i}                    onChange={(e) =&gt; onlyone(e.target)}                  &gt;&lt;/input&gt;                &lt;/div&gt;                &lt;div className=\"contentbox\"&gt;                  &lt;div className=\"content\"&gt;{result[a].c4}&lt;/div&gt;                  &lt;input                    type=\"checkbox\"                    value={\"4\"}                    className=\"q\"                    name={i}                    onChange={(e) =&gt; onlyone(e.target)}                  &gt;&lt;/input&gt;                &lt;/div&gt;                &lt;div className=\"contentbox\"&gt;                  &lt;div className=\"content\"&gt;{result[a].c5}&lt;/div&gt;                  &lt;input                    type=\"checkbox\"                    value={\"5\"}                    className=\"q\"                    name={i}                    onChange={(e) =&gt; onlyone(e.target)}                  &gt;&lt;/input&gt;                &lt;/div&gt;              &lt;/div&gt;            &lt;/div&gt;          ))}        &lt;/div&gt;      &lt;/div&gt;      &lt;div className=\"button-list\"&gt;        &lt;button className=\"button-right btn\"&gt;다음문제&lt;/button&gt;      &lt;/div&gt;    &lt;/&gt;  );}/* src/app/quiz_h/style.css */input[type=\"checkbox\"] {  width: 1rem;  height: 1rem;  border-radius: 50%;  border: 1px solid #999;  appearance: none;  cursor: pointer;  transition: background 0.2s;  display: flex;  align-items: center;  scale: 1.5;}input[type=\"checkbox\"]:checked {  background: #32e732;  border: none;}button {  border: none;  background-color: transparent;  padding: 0;  margin: 0;  display: inline-block;  cursor: pointer;  text-decoration: none;  font-size: inherit;  font-family: inherit;  color: inherit;  outline: none;  box-shadow: none;}.btn {  background-color: #3498db;  color: #fff;  border-radius: 5px;  padding: 10px 20px;  transition: background-color 0.3s, color 0.3s;  display: block;  align-items: center;}.btn:hover {  background-color: #2980b9;}#load {  width: 100%;  height: 100%;  position: fixed;  display: block;  opacity: 1;  background: white;  z-index: 99;  text-align: center;}.black-bg {  width: 100%;  height: 100%;  top: 0;  left: 0;  position: fixed;  background: rgba(0, 0, 0, 0.5);  z-index: 5;  padding: 30px;  display: none;}.show-modal {  display: block;}.white-bg {  width: 800px;  height: 500px;  background: white;  border-radius: 10px;  padding: 30px;  margin: auto;}.my-score {  display: flex;  margin: auto;  justify-content: center;  flex-wrap: wrap;}.submitButton {  margin: 50px;  margin-left: 300px;  margin-right: 300px;}.outer {  border: 1px solid black;  width: 1400px;  height: 600px;  margin: 0 auto;  overflow-x: hidden;  display: block;}.inner-list {  display: flex;  height: 100%;}.inner {  width: 100%;  display: flex;  flex-direction: column;}.question {  margin-left: 20px;}.contentbox {  display: flex;  margin-left: 20px;  margin-bottom: 30px;}.content {  font-size: 20px;  width: 400px;}.button-list {  text-align: center;  display: flex;  justify-content: center;}제가 이런걸 처음 만들어봐서 코드가 조잡할 수 있습니다. 언제든지 수정할만한 사항이 있으면 댓글 남겨주세요.제작하는데 생각보다 오래 걸려 과정은 생략하게 되었습니다. 서버 컴포넌트에서 랜덤한 숫자 20개와 DB의 데이터를 가져오고, 이를 바탕으로 클라이언트 컴포넌트에서 주로 제작하였습니다. 20개의 퀴즈를 다 풀면 결과와 함께 제출버튼이 나오게 됩니다.API 만들기제출 버튼을 누르면 점수가 DB에 등록되게 API를 만들어 봅시다.//src/pages/api/result.jsimport { connectDB } from \"/Users/jyp/Documents/GitHub/quiz_project/src/util/db.js\";export default async function handler(req, res) {  try {    const result = JSON.parse(req.body);    const db = (await connectDB).db(\"Score\");    db.collection(\"userscore\").insertOne(result);    //작업이 끝나면 메인 페이지로 이동    res.redirect(302, \"/\");    //오류발생시 실행될 함수  } catch (error) {    return res.status(500).json(\"서버 오류\");  }}퀴즈를 푸는 페이지를 완성하고 API 까지 제작해보았습니다.마지막 제출버튼을 누르면 바로 메인페이지로 이동시키고싶었는데, fetch api로는 불가능하다고 하네요.로그인 기능 만들기일단은 이렇게 끝마치고 마지막 기능인 로그인기능과 순위판을 제작해보도록 하겠습니다. 순위판에는 이름이 적혀있어야 하니이름을 넣기 위해 먼저 로그인 기능부터 구현하겠습니다.nextauth 설치로그인기능은 next.js의 nextauth라는 라이브러리를 사용하여간단하게 소셜로그인을 구현해보겠습니다.저는 github로그인과 구글로그인을 할수 있게 만들어보겠습니다. 우선 터미널에서 nextauth부터 설치하겠습니다.npm install next-authnextauth를 설치한 뒤에 github와 구글에 들어가서 소셜로그인 세팅을 해보겠습니다.github 소셜로그인 세팅우선 먼저 github부터 해보겠습니다.저는 이미 하나 있지만 새로 만들겠습니다.지금은 localhost로 해놓았지만, aws같은곳에 올릴거면 주소를 바꿔줘야 합니다.사진의 과정을 따라오면, 끝이 납니다. Key를 생성해주고, client id와 key를 .env같은 소중한곳에 잘 숨겨줍시다.다시 돌아와서 새로운 폴더를 만들어줍니다. src/pages/api/ 주소에 auth 폴더를 생성하고 그 안에 […nextauth].js 파일을 새로 생성해줍시다.//scr/pages/api/auth/[...nextauth].jsimport NextAuth from \"next-auth\";import GithubProvider from \"next-auth/providers/github\";import GoogleProvider from \"next-auth/providers/google\";require(\"dotenv\").config();export const authOptions = {  providers: [    GithubProvider({      clientId: process.env.githubOAuthID,      clientSecret: process.env.githubOAuthKey,    }),    GoogleProvider({      clientId: process.env.googleOAuthID,      clientSecret: process.env.googleOAuthKey,    }),  ],  secret: process.env.JWTpassword,};export default NextAuth(authOptions);github 로그인 구현은 완료되었습니다.구글 소셜로그인 세팅이제 구글의 provider를 가져와보겠습니다.가장 먼저 구글 클라우드 플랫폼에 들어가줍니다.여기까지 하고 뒤에 있는 두개의 챕터는 그냥 다음 버튼 누르면서 건너뛰기 해줍니다.구글 OAuth ID와 키도 받아내었습니다. 이제 홈페이지에서 정상적으로 작동되는지 테스트해보겠습니다.github와 google로그인 모두 오류를 뱉었습니다. 사이트의 url을 적을때 http://localhost:3000 이라고 적어야하는데 https://localhost:3000이라고입력해버려 오류가 났습니다.구글 로그인의 경우에는 한가지 문제가 더 있었는데, redirect uri를 잘못 적었습니다. http://localhost:3000이라고 적는것이 아니라,http://localhost:3000/api/auth/callback/google이라고 적어야 합니다.이 두개의 문제를 해결하고 나니 두 로그인 방식 모두 성공적으로 끝마쳤습니다.로그인기능 이용하기레이아웃 변경이제 로그아웃 버튼도 추가하고, 로그인 기능을 이용해서 글 작성과 퀴즈 풀기를 로그인을 마쳐야 풀 수 있게 해보겠습니다.//src/app/logoutbtn.js\"use client\";import \"./globals.css\";import { signOut } from \"next-auth/react\";export default function LogoutBtn() {  return (    &lt;button      className=\"login_btn\"      onClick={() =&gt; {        signOut();      }}    &gt;      로그아웃    &lt;/button&gt;  );}로그아웃 버튼 컴포넌트입니다.//src/app/layout.jsimport Link from \"next/link\";import \"./globals.css\";import { Inter } from \"next/font/google\";import LoginBtn from \"./loginbtn\";import LogoutBtn from \"./logoutbtn\";import { getServerSession } from \"next-auth\";import { authOptions } from \"@/pages/api/auth/[...nextauth]\";const inter = Inter({ subsets: [\"latin\"] });export const metadata = {  title: \"Quiz time!\",  description: \"my quiz project\",};export default async function RootLayout({ children }) {  let session = await getServerSession(authOptions);  return (    &lt;html lang=\"en\"&gt;      &lt;body className={inter.className}&gt;        &lt;div className=\"header\"&gt;          &lt;Link href=\"/\" className=\"title\"&gt;            Quiz time!          &lt;/Link&gt;          &lt;Link href=\"/newquiz\" className=\"nav_btn\"&gt;            퀴즈 만들기          &lt;/Link&gt;          &lt;Link href=\"/quiz\" className=\"nav_btn\"&gt;            퀴즈 풀기          &lt;/Link&gt;          {session ? (            &lt;&gt;              &lt;LogoutBtn&gt;&lt;/LogoutBtn&gt;              &lt;h2 className=\"UserName\"&gt;{session.user.name}님, 환영합니다!&lt;/h2&gt;            &lt;/&gt;          ) : (            &lt;LoginBtn&gt;&lt;/LoginBtn&gt;          )}        &lt;/div&gt;        {children}      &lt;/body&gt;    &lt;/html&gt;  );}수정된 레이아웃입니다. 로그인 상태면 로그아웃 버튼이 보이고, 로그아웃 상태면 로그인 버튼이 보입니다.DBadapter 설치그러고 나서 DBadapter를 설치해줍니다. 유저의 로그인 정보를 DB에 저장하기 위해 사용합니다.npm install @next-auth/mongodb-adapterimport NextAuth from \"next-auth\";import GithubProvider from \"next-auth/providers/github\";import GoogleProvider from \"next-auth/providers/google\";import { MongoDBAdapter } from \"@next-auth/mongodb-adapter\";import { connectDB } from \"@/util/db\";require(\"dotenv\").config();export const authOptions = {  providers: [    GithubProvider({      clientId: process.env.githubOAuthID,      clientSecret: process.env.githubOAuthKey,    }),    GoogleProvider({      clientId: process.env.googleOAuthID,      clientSecret: process.env.googleOAuthKey,    }),  ],  secret: process.env.JWTpassword,  adapter: MongoDBAdapter(connectDB),};export default NextAuth(authOptions);이렇게 코드를 짜놓으면 로그인시 DB에 회원정보와 로그인 데이터가 남습니다.로그아웃 상태일때, 로그인시키기//src/app/quiz_h/page.jsimport Util from \"./util\";import { connectDB } from \"/Users/jyp/Documents/GitHub/quiz_project/src/util/db.js\";import { getServerSession } from \"next-auth\";import { authOptions } from \"@/pages/api/auth/[...nextauth]\";export default async function Quiz_h() {  const client = await connectDB;  const db = client.db(\"Quiz_Data\"); //mongodb 불러오기  let NumberOfQuestion = await db.collection(\"Quiz\").count(); //Quiz collection 안에 있는 데이터의 개수 불러오기  let result = await db.collection(\"Quiz\").find().toArray(); //Quiz collection 안에 있는 모든 데이터 불러오기  //_id를 문자열로 변환  result = result.map((a) =&gt; {    a._id = a._id.toString();    return a;  });  //문제가 랜덤하게 나올수 있도록 Quiz collection 안에 있는 데이터의 개수의 범위 안에서 20개의 랜덤숫자 생성하기  const numbers = [];  for (let i = 0; i &lt; NumberOfQuestion; i++) {    numbers.push(i);  }  //  const answer = [];  for (let n = 0; n &lt; 20; n++) {    const index = Math.floor(Math.random() * numbers.length);    answer.push(numbers[index]);    numbers.splice(index, 1);  }  //로그인정보 가져오기  let session = await getServerSession(authOptions);  return (    &lt;&gt;      &lt;Util answer={answer} result={result} session={session}&gt;&lt;/Util&gt;    &lt;/&gt;  );}//src/app/quiz_h/util.jsif (!session) {  signIn();}session에 관한 정보를 util.js 로 넘겨서 로그인이 안되어있을시 바로 로그인하게 설정해줍니다.이 코드를 퀴즈 만들기 페이지에도 똑같이 만들어줍시다.모두 끝났다면 퀴즈 작성, 결과 전송을 할때, 유저의 정보도 같이 DB에 올려봅시다.//src/app/newquiz/page.jsimport Checkbox from \"./Checkbox\";import { getServerSession } from \"next-auth\";import { authOptions } from \"@/pages/api/auth/[...nextauth]\";export default async function Newquiz() {  let session = await getServerSession(authOptions);  return (    &lt;&gt;      &lt;div className=\"container\"&gt;        &lt;Checkbox session={session}&gt;&lt;/Checkbox&gt;      &lt;/div&gt;    &lt;/&gt;  );}//src/app/newquiz/page.js\"use client\";import \"./Checkbox.css\";import { signIn } from \"next-auth/react\";export default function Checkbox({ session }) {  if (!session) {    signIn();  }  let multiple_choice = [1, 2, 3, 4, 5];  const onlyone = (checkThis) =&gt; {    const checkboxes = document.getElementsByName(\"a\");    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i] !== checkThis) {        checkboxes[i].checked = false;      }    }  };  const handleSubmit = (event) =&gt; {    const QuestionInput = event.target.elements.q;    const inputElements = event.target.elements;    const checkboxes = document.getElementsByName(\"a\");    const userName = document.querySelector(\"#userName\");    userName.value = session.user.name;    // \"c\"가 포함된 \"name\"을 가진 input 중 하나라도 비어있는지 확인    let isAnyInputEmpty = false;    for (let i = 0; i &lt; inputElements.length; i++) {      const inputName = inputElements[i].name;      if (inputName &amp;&amp; inputName.includes(\"c\") &amp;&amp; !inputElements[i].value) {        isAnyInputEmpty = true;        break;      }    }    let isAnyCheckboxChecked = false;    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i].checked) {        isAnyCheckboxChecked = true;        break;      }    }    event.preventDefault(); // 기본 제출 동작 방지    if (!QuestionInput.value) {      // 제목 또는 내용이 비어있는 경우      alert(\"문제 내용을 입력해주세요!\");    } else if (isAnyInputEmpty) {      alert(\"문제가 비었습니다!\");    } else if (!isAnyCheckboxChecked) {      alert(\"체크박스를 체크하여 정답을 선택하세요!\");    } else {      event.target.submit(); // 제출    }  };  return (    &lt;form action=\"/api/write\" method=\"POST\" onSubmit={handleSubmit}&gt;      &lt;div className=\"checkbox-container\"&gt;        &lt;h1&gt;퀴즈 만들기&lt;/h1&gt;        &lt;input          name=\"q\"          type=\"text\"          placeholder=\"문제의 내용을 입력하세요.\"          autoComplete=\"off\"        &gt;&lt;/input&gt;        {multiple_choice.map((a, i) =&gt; (          &lt;div className=\"checkbox-row\" key={i}&gt;            &lt;div className=\"num\"&gt;{multiple_choice[i] + \")\"}&lt;/div&gt;            &lt;input              type=\"text\"              name={\"c\" + multiple_choice[i]}              placeholder={multiple_choice[i] + \"번 문제\"}            /&gt;            &lt;input              type=\"checkbox\"              name=\"a\"              value={multiple_choice[i]}              onChange={(e) =&gt; onlyone(e.target)}            /&gt;          &lt;/div&gt;        ))}        &lt;input style= type=\"text\" name=\"userid\" id=\"userName\"&gt;&lt;/input&gt;        &lt;button type=\"submit\" className=\"submit-button\"&gt;          제출하기        &lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  );}이제 퀴즈 풀기 창에서도 유저의 이름과 함께 전송하도록 수정해줍니다.//src/app/quiz_h/util.jsexport default async function Util({ result, answer, session }) {  const onlyone = (checkThis) =&gt; {    const checkboxes = document.getElementsByClassName(\"q\");    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i] !== checkThis) {        checkboxes[i].checked = false;      }    }  };  useEffect(() =&gt; {    //로딩이 완료되었다면 로딩페이지 제거    // 변수/상수 선언    const outer = document.querySelector(\".outer\");    const innerList = document.querySelector(\".inner-list\");    const inners = document.querySelectorAll(\".inner\");    const loading = document.getElementById(\"load\");    const buttonRight = document.querySelector(\".button-right\");    const showScore = document.querySelector(\"#score\");    const showResult = document.querySelector(\".black-bg\");    const submitButton = document.querySelector(\".submitButton\");    var count = 0;    var score = 0;    var IsitCorrect = new Object();    //다음문제 버튼을 클릭하였을시 실행되는 함수    buttonRight.addEventListener(\"click\", () =&gt; {      const parentComponent = document.getElementById(count);      const countCheckbox = parentComponent.querySelectorAll('input[type=\"checkbox\"]');      let isChecked = false;      // 모든 체크박스를 반복하며 체크 상태를 확인합니다.      for (let i = 0; i &lt; countCheckbox.length; i++) {        if (countCheckbox[i].checked) {          isChecked = true;          break; // 하나라도 체크되어 있으면 루프를 종료합니다.        }      }      //하나도 체크되어 있지 않다면      if (!isChecked) {        alert(\"체크박스를 체크하여 정답을 선택하세요!\");      }      //그렇지 않으면      else {        //다음 문제로 넘기기        currentIndex++;        currentIndex = currentIndex &gt;= inners.length ? inners.length - 1 : currentIndex;        innerList.style.marginLeft = `-${outer.clientWidth * currentIndex}px`;        //체크된 체크박스값 보기        const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]:checked');        const checkedValues = Array.from(checkboxes).map((checkbox) =&gt; checkbox.value);        //체크박스에 입력한 문제가 정답이라면 answer에 1을 넣고, 스코어 추가        if (checkedValues == result[answer[count]].a) {          //19번째 문제에 도달했을때, 20번째 문제의 버튼은 '제출'로 보이게 하기          if (count &gt;= 18) {            buttonRight.innerText = \"제출\";          }          //마지막 문제까지 제출하면, 결과 보여주기          if (count == 19) {            showResult.classList.add(\"show-modal\");          }          IsitCorrect[\"answer\" + count] = 1;          score++;          showScore.innerText = `${score * 5}`;        }        //오답시 answer에 0을 넣기        else {          IsitCorrect[\"answer\" + count] = 0;        }        //카운트 추가        count++;      }    });    submitButton.addEventListener(\"click\", async () =&gt; {      IsitCorrect[\"result\"] = score * 5;      IsitCorrect[\"user\"] = session.user.name;      await fetch(\"/api/result\", {        method: \"POST\",        body: JSON.stringify(IsitCorrect),      }).then(() =&gt; {        console.log(\"success\");        alert(\"제출완료\");      });    });    //로그인 안되어있으면 로그인시키기    if (!session) {      signIn();    }    //문제 개수만큼 div박스 늘리기    let currentIndex = 0;    if (outer &amp;&amp; innerList &amp;&amp; inners) {      inners.forEach((inner) =&gt; {        inner.style.width = `${outer.clientWidth}px`;      });      innerList.style.width = `${outer.clientWidth * inners.length}px`;    }    const onPageLoad = () =&gt; {      loading.style.display = \"none\";    };    document.onreadystatechange = function () {      if (document.readyState === \"complete\") {        onPageLoad();      } else {        window.addEventListener(\"load\", onPageLoad, false);        // Remove the event listener when component unmounts        return () =&gt; window.removeEventListener(\"load\", onPageLoad);      }    };  }, []);  return(  //생략  )}코드 수정중, 문제를 다 맞혀도 95점으로 뜨게 되는 문제도 함께 수정하였습니다.정상적으로 DB에 아이디가 출력되는 모습마치며이번 시간에는 퀴즈를 푸는 페이지를 만들고, 회원기능, DB에 유저의 이름과 함께 결과를 전송하는 기능까지제작하였습니다. 다음 시간엔 순위판을 제작하고, aws에 웹사이트를 등록해보겠습니다.긴 글 읽어주셔서 감사합니다."
  },
  
  {
    "title": "퀴즈 사이트 만들기_2 (next.js)",
    "url": "/posts/Quiz_project_2/",
    "categories": "MacOs, Next.js, javascript",
    "tags": "Quiz_project",
    "date": "2023-07-30 11:33:00 +0900",
    





    
    "snippet": "시작하며지난 포스팅에서는 next.js를 설치하고, 레이아웃까지 제작하였다. 이번 포스팅에서는나머지 페이지들의 내용을 구성해볼것이다.  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.메인 페이지 구성메인 페이지에는 이 웹사이트에 있는 기능들과 사용법을 소개할 것입니다.아직 저의 프로젝트는 완성되어있지 않고, 계속 수정될 수 있기 때문에...",
    "content": "시작하며지난 포스팅에서는 next.js를 설치하고, 레이아웃까지 제작하였다. 이번 포스팅에서는나머지 페이지들의 내용을 구성해볼것이다.  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.메인 페이지 구성메인 페이지에는 이 웹사이트에 있는 기능들과 사용법을 소개할 것입니다.아직 저의 프로젝트는 완성되어있지 않고, 계속 수정될 수 있기 때문에 비워놓고 다른 페이지부터제작하겠습니다.로딩 페이지 구성로딩중일때 띄워질 페이지를 구성해 봅시다. app폴더 안에 loading.js파일을 생성하면,로딩중일때 loading.js파일의 내용을 띄워 줍니다. chatgpt를 사용해서 레이아웃을 로딩 애니메이션을만들어달라 부탁해보았습니다.//src/app/loading.jsimport \"./globals.css\";export default function LoadingPage() {  return (    &lt;div className=\"loading\"&gt;      &lt;div className=\"loading-container\"&gt;        &lt;div className=\"loading-spinner\"&gt;&lt;/div&gt;        &lt;p className=\"loading-text\"&gt;Loading...&lt;/p&gt;      &lt;/div&gt;    &lt;/div&gt;  );}/*src/app/globals.css*/.loading {  display: flex;  justify-content: center;  align-items: center;  height: 100vh;  margin: 0;  background-color: #f0f0f0;}.loading-container {  text-align: center;  font-family: Arial, sans-serif;}.loading-spinner {  border: 4px solid rgba(0, 0, 0, 0.3);  border-top: 4px solid #3498db;  border-radius: 50%;  width: 40px;  height: 40px;  animation: spin 1s linear infinite;  margin: 0 auto 10px;}@keyframes spin {  0% {    transform: rotate(0deg);  }  100% {    transform: rotate(360deg);  }}.loading-text {  color: #333;  font-size: 18px;}배보다 배꼽이 큰 기능을 만든 것 같지만, next.js의 기능들을 사용해보고 싶어 추가해보았습니다.퀴즈 만들기 페이지 구성만들기//src/app/newquiz/page.jsexport default function Newquiz() {  //map함수 사용을 위한 array 자료형  let multiple_choice = [1, 2, 3, 4, 5];  //체크박스중 하나만 선택되게 하는 함수  const onlyone = (checkThis) =&gt; {    const checkboxes = document.getElementsByName(\"a\");    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i] !== checkThis) {        checkboxes[i].checked = false;      }    }  };  return (    &lt;div&gt;      {multiple_choice.map((a, i) =&gt; (        &lt;&gt;          &lt;input            name={\"q\" + multiple_choice[i]}            placeholder={multiple_choice[i] + \"번 문제\"}          &gt;&lt;/input&gt;          &lt;input            type=\"checkbox\"            name=\"a\"            value={\"a\" + multiple_choice[i]}            onChange={(e) =&gt; onlyone(e.target)}          &gt;&lt;/input&gt;          &lt;br&gt;&lt;/br&gt;        &lt;/&gt;      ))}    &lt;/div&gt;  );}  Error: document is not defined오류 발생?newquiz란 폴더를 app폴더 안에 새로 생성한 뒤, 퀴즈를 만들때 사용할 페이지의 내용을 담았다.위 사진처럼 질문 입력박스와 그 왼편에 체크박스를 두어 5개의 선다중 정답인 것을 체크할 수 있게 하는 기능을 넣었는데,정답은 1개이므로, 1개만 체크할수 있게 js로 html제어 기능을 사용하였더니 위의 오류가 출력되었다.오류 해결이러한 오류가 발생하는 이유는 next.js는 SSR (Server Side Rendering)방식으로 구동되기 때문입니다.서버에서 렌더링하여 완성된 파일을 클라이언트에 전송하는방식이 SSR인데, 이러한 방식으로 작동되기 때문에client에서 실행되는 html제어가 사용되지 않는 것이다.문제를 해결하기 위해선 SSR이 아닌 CSR을 사용하면 됩니다. html제어가 사용되는 부분을 새로운 파일로 떨어뜨려놓고그 파일을 CSR로 구동되게 선언하면 해결됩니다.//src/app/newquiz/page.jsimport Checkbox from \"./Checkbox\";export default function Newquiz() {  return (    &lt;&gt;      &lt;div className=\"container\"&gt;        &lt;Checkbox&gt;&lt;/Checkbox&gt; //next.js의 컴포넌트 문법을 통해 CSR과 SSR을 분리합니다.      &lt;/div&gt;      &lt;div className=\"howto\"&gt;        &lt;h2&gt;퀴즈 작성하는법&lt;/h2&gt;        &lt;h4&gt;1. 문제의 내용을 입력해줍니다.&lt;/h4&gt;        &lt;h4&gt;2. 5문항 모두 문제를 작성해줍니다.&lt;/h4&gt;        &lt;h4&gt;3. 정답인 문항의 왼쪽에 체크표시를 해줍니다.&lt;/h4&gt;      &lt;/div&gt;    &lt;/&gt;  );}//src/app/newquiz/Checkbox.js\"use client\";import \"./Checkbox.css\"; // Import the CSS file for stylingexport default function Checkbox() {  let multiple_choice = [1, 2, 3, 4, 5];  const onlyone = (checkThis) =&gt; {    const checkboxes = document.getElementsByName(\"a\");    for (let i = 0; i &lt; checkboxes.length; i++) {      if (checkboxes[i] !== checkThis) {        checkboxes[i].checked = false;      }    }  };  return (    &lt;form onSubmit={handleSubmit}&gt;      &lt;div className=\"checkbox-container\"&gt;        &lt;h1&gt;퀴즈 만들기&lt;/h1&gt;        &lt;input          name=\"q\"          type=\"text\"          placeholder=\"문제의 내용을 입력하세요.\"          autoComplete=\"off\"        &gt;&lt;/input&gt;        {multiple_choice.map((a, i) =&gt; (          &lt;div className=\"checkbox-row\" key={i}&gt;            &lt;div className=\"num\"&gt;{multiple_choice[i] + \")\"}&lt;/div&gt;            &lt;input              type=\"text\"              name={\"c\" + multiple_choice[i]}              placeholder={multiple_choice[i] + \"번 문제\"}            /&gt;            &lt;input              type=\"checkbox\"              name=\"a\"              value={\"a\" + multiple_choice[i]}              onChange={(e) =&gt; onlyone(e.target)}            /&gt;          &lt;/div&gt;        ))}        &lt;button type=\"submit\" className=\"submit-button\"&gt;          제출하기        &lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  );}제일 중요한 문제를 적는 박스를 넣는것을 까먹어 수정하고, 다른부분도 이것저것 수정했습니다.이렇게 고치고 난 뒤, css는 또 다시 우리의 조수 chatgpt를 통해 해결해봅시다./* src/app/newquiz/Checkbox.css *//* 기본 컨테이너 스타일 */.checkbox-container {  display: flex;  flex-direction: column;  align-items: center;  margin: 20px;  padding: 20px;  border: 1px solid #ccc;  border-radius: 5px;  background-color: #f5f5f5;}/* 제목 스타일 */h1 {  font-size: 24px;  margin-bottom: 20px;}/* 입력 필드 스타일 */input {  margin: 5px 0;  padding: 8px 12px;  border: 1px solid #ccc;  border-radius: 4px;}/* 체크박스 스타일 */input[type=\"checkbox\"] {  margin-right: 10px;  scale: 1.5;}input[type=\"text\"] {  margin-right: 10px;  width: 500px;}/* 제출 버튼 스타일 */.submit-button {  margin-top: 20px;  padding: 10px 20px;  background-color: #007bff;  color: #fff;  border: none;  border-radius: 4px;  cursor: pointer;}.submit-button:hover {  background-color: #0056b3;}.loading {  display: flex;  justify-content: center;  align-items: center;  height: 100vh;  margin: 0;  background-color: #f0f0f0;}.loading-container {  text-align: center;  font-family: Arial, sans-serif;}.loading-spinner {  border: 4px solid rgba(0, 0, 0, 0.3);  border-top: 4px solid #3498db;  border-radius: 50%;  width: 40px;  height: 40px;  animation: spin 1s linear infinite;  margin: 0 auto 10px;}@keyframes spin {  0% {    transform: rotate(0deg);  }  100% {    transform: rotate(360deg);  }}.loading-text {  color: #333;  font-size: 18px;}퀴즈 풀기 페이지 구성mongodb 가입하기 &amp; DB만들기퀴즈 풀기 페이지는 mongodb연동부터 시작하겠습니다.가장 먼저 mongodb에 가입해줍니다.저는 이미 mongodb에 가입해놓았기 때문에 새로운 부계정을 만들어보겠습니다.가입이 어찌저찌 완료되면 이러한 화면이 뜹니다. 가장 오른쪽에 있는 무료 요금제를 선택해준 뒤에,밑에 provider는 aws를 선택해주고, 지역은 서울 아니면 도쿄를 선택해줍니다.그런 뒤에 생성을 해주고, 다음 창에서 이름과 비밀번호를 대충 만들어줍시다.그런 뒤에 밑에 창에서는 ` 0.0.0.0`` 의 IP주소를 추가해줍니다. 이렇게 되면 모든 주소에서 DB를 사용할수 있게 됩니다.원하지 않는다면, 본인 컴퓨터의 IP주소만 추가해주셔도 됩니다.정상적으로 완성되었다면, 이러한 창이 나오게 됩니다. 이때  Browse Collections를 눌러 들어가줍시다.그런 뒤에 Create Database버튼을 눌러주고 아무렇게나 작명한뒤에 추가해줍니다.DB가 정상적으로 만들어졌다면, 이러한 화면이 뜨는데, 여기서 insert document를 새로 만들어줍니다.저는 문제의 질문 한개, 객관식 5개, 정답 1개이므로 총 7개의 테이블을 추가로 만들었습니다.저희는 문제 20개 풀이를 할것이므로, mongodb연결을 하고 퀴즈 만들기 창에서 퀴즈 20개를 제작해봅시다.mongodb 연결하기npm install mongodb가장 먼저 터미널에서 mongodb를 불러오기 위해 라이브러리를 설치해줍니다.//src/util/db.jsimport { MongoClient } from \"mongodb\";require(\"dotenv\").config();const url = process.env.mongodb;const options = { useNewUrlParser: true };let connectDB;if (process.env.NODE_ENV === \"development\") {  if (!global._mongo) {    global._mongo = new MongoClient(url, options).connect();  }  connectDB = global._mongo;} else {  connectDB = new MongoClient(url, options).connect();}export { connectDB };src 폴더안에 util폴더를 만들고 그 안에 db.js파일을 만들고 그곳에 위 코드를 입력해주었습니다.url코드는 dotenv를 설치하여 안보이게 해놓았지만, 위process.env.mongodb부분을 바꿔주어야 합니다.다시 이곳으로 돌아와서 Connect버튼을 누르고제일 상단의 Driver버튼을 누른 뒤에그곳에 있는 자신의 mongodb주소를 process.env.mongodb와 바꿔주어야 합니다.이때, &lt;password&gt;는 자신이 계정을 가입할때 만들어둔 비밀번호를 입력하면 됩니다.(&lt;&gt;기호 떼고 넣으셔야 합니다.)이렇게 되면 mongodb와 연결이 완료되었습니다. 테스트를 위해 post.js에 간단한 코드를 작성해보겠습니다.export default async function Newquiz() {  const client = await connectDB;  const db = client.db(\"Quiz_Data\");  let result = await db.collection(\"Quiz\").find().toArray();  console.log(result);  return(    //~~~  )}return()위에 해당 명령어를 입력하여 터미널에 정상적으로 데이터들이 출력되는지 확인해봅니다.터미널에서 정상적으로 작동되는 모습퀴즈 만들기 api 개발이제 api를 통하여 퀴즈 만들기 페이지에서 퀴즈를 작성하고 제출을 누르면, DB에 해당 문제가 저장되게 만들어야합니다.가장먼저 src폴더 안에 pages폴더를 만들고 그 안에 api폴더를 만들어주었습니다.이제 이곳에 js파일을 생성하여 api코드를 작성해주면 됩니다.그 전에 퀴즈 만들기 페이지에서 제출하기 버튼을 눌렀을때,문제를 넣는 칸이 비어있다면 주의 문자를 주는 기능부터 작성해봅시다.//src/app/newquiz/Checkbox.js//위부분 생략const handleSubmit = (event) =&gt; {  event.preventDefault(); // 기본 제출 동작 방지  const QuestionInput = event.target.elements.q;  const inputElements = event.target.elements;  const checkboxes = document.getElementsByName(\"a\");  // \"c\"가 포함된 \"name\"을 가진 input 중 하나라도 비어있는지 확인  let isAnyInputEmpty = false;  for (let i = 0; i &lt; inputElements.length; i++) {    const inputName = inputElements[i].name;    if (inputName &amp;&amp; inputName.includes(\"c\") &amp;&amp; !inputElements[i].value) {      isAnyInputEmpty = true;      break;    }  }  // 체크박스중 하나라도 체크가 되어있는지 확인  let isAnyCheckboxChecked = false;  for (let i = 0; i &lt; checkboxes.length; i++) {    if (checkboxes[i].checked) {      isAnyCheckboxChecked = true;      break;    }  }  if (!QuestionInput.value) {    // 문제 내용이 비어있는경우    alert(\"문제 내용을 입력해주세요!\");  } else if (isAnyInputEmpty) {    // 문제가 비어있는경우    alert(\"문제가 비었습니다!\");  } else if (!isAnyCheckboxChecked) {    //체크박스가 비어있는경우    alert(\"체크박스를 체크하여 정답을 선택하세요!\");  } else {    event.target.submit(); // 제출  }};return (  &lt;form action=\"/api/write\" method=\"POST\" onSubmit={handleSubmit}&gt;    &lt;div className=\"checkbox-container\"&gt;      &lt;h1&gt;퀴즈 만들기&lt;/h1&gt;      &lt;input        name=\"q\"        type=\"text\"        placeholder=\"문제의 내용을 입력하세요.\"        autoComplete=\"off\"      &gt;&lt;/input&gt;      {multiple_choice.map((a, i) =&gt; (        &lt;div className=\"checkbox-row\" key={i}&gt;          &lt;div className=\"num\"&gt;{multiple_choice[i] + \")\"}&lt;/div&gt;          &lt;input            type=\"text\"            name={\"c\" + multiple_choice[i]}            placeholder={multiple_choice[i] + \"번 문제\"}          /&gt;          &lt;input            type=\"checkbox\"            name=\"a\"            value={\"a\" + multiple_choice[i]}            onChange={(e) =&gt; onlyone(e.target)}          /&gt;        &lt;/div&gt;      ))}      &lt;button type=\"submit\" className=\"submit-button\"&gt;        제출하기      &lt;/button&gt;    &lt;/div&gt;  &lt;/form&gt;);form태그에 api요청을 보낼 주소도 적어주면, 이제 글 작성페이지는 완성입니다.pages/api/주소에 만들어둔 js파일을 통해 api개발을 시작해봅시다.//src/pages/api/write.jsimport { connectDB } from \"@/util/DB\";export default async function handler(req, res) {  try {    console.log(req.body);    const db = (await connectDB).db(\"Quiz_Data\");    db.collection(\"Quiz\").insertOne(req.body);    //작업이 끝나면 메인 페이지로 이동    res.redirect(302, \"/\");    //오류발생시 실행될 함수  } catch (error) {    return res.status(500).json(\"서버 오류\");  }}모든 퀴즈 작성기능이 완성되었습니다. 이제 퀴즈 만들기에 들어가서 퀴즈를 작성하면 DB에 퀴즈가 등록되는것을 확인할 수 있습니다.이번 포스팅은 여기서 마치고, 다음 포스팅에서는 퀴즈 풀기 기능을 구현해보겠습니다. 읽어주셔서 감사합니다."
  },
  
  {
    "title": "퀴즈 사이트 만들기_1 (next.js)",
    "url": "/posts/Quiz_project_1/",
    "categories": "MacOs, Next.js, javascript",
    "tags": "Quiz_project",
    "date": "2023-07-25 11:33:00 +0900",
    





    
    "snippet": "  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.시작하며방학이 찾아온 김에 게으르게 놀지 말고 무언가 하나라도 만들어봐야지 하며 시작하게 되었다.어떤 프로젝트를 만들면 좋을까 생각하다가, 캬훗과 비슷하지만, 다른 느낌의 퀴즈 사이트를 만들어보기로 결정했다.카훗은 혼자 퀴즈를 풀 수 없고, 그룹장이 게임을 만들어야만 퀴즈를 풀 수 있다...",
    "content": "  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.시작하며방학이 찾아온 김에 게으르게 놀지 말고 무언가 하나라도 만들어봐야지 하며 시작하게 되었다.어떤 프로젝트를 만들면 좋을까 생각하다가, 캬훗과 비슷하지만, 다른 느낌의 퀴즈 사이트를 만들어보기로 결정했다.카훗은 혼자 퀴즈를 풀 수 없고, 그룹장이 게임을 만들어야만 퀴즈를 풀 수 있다. 나는 혼자서도 퀴즈를 풀 수 있는사이트를 제작해보면 좋을것 같다는 생각이 들었다.퀴즈 사이트에 들어갈 기능  퀴즈를 직접 작성하여 올릴수 있어야 한다.  퀴즈가 만들어지면 DB에 퀴즈가 저장되고, 퀴즈 풀기를 할때 랜덤으로 유저가 작성해놓은 퀴즈가 나온다.  한번에 풀 수 있는 퀴즈의 수를 20개로 제한해놓고, 다 풀었을 시 순위판이 나오고, 점수가 정산된다.사용할 라이브러리/DBnext.jsvercel에서 제작한 풀스택 기반 SSR렌더링 방식의 프레임워크입니다.다룰줄 아는 프레임워크가 이거밖에 없어 사용하게 되었습니다.mongodbmongodb는 noSQL계열의 데이터베이스 시스템입니다.마찬가지로 다룰줄 아는 DB가 mongodb밖에 없어 사용하게 되었습니다.시작하기node.js 설치node.js를 설치해줍시다. 최신버전과 추천버전중 아무거나 설치해줍니다.저는 이미 설치되어있으므로 설치는 건너뛰겠습니다.next.js 설치먼저 vscode를 들어온 뒤에 next.js프로젝트 폴더를 생성할 폴더에 들어와 터미널을 열어줍니다. 그 이후 터미널에 해당 명령어를 입력합니다.npx create-next-app@latest입력 후 질문이 들어오는데 y를 입력하고 엔터를 눌러줍니다.그리고 프로젝트의 이름을 지어줍니다. 저는 quiz_project로 이름을 지어주었습니다.프로젝트 작명에는 대문자가 들어갈수 없다네요.그리고 여러가지 설정에 대한 질문이 들어오는데, 저는 딱히 특별한 기능은 사용하지 않을것이기 때문에, src디렉토리 생성과 app router기능만 활성화했습니다. 그냥 app router만 켜두셔도 무방합니다.github에 업로드가장 먼저, github에서 새로운 repository를 만들어준 뒤에, 저희가 만든 next.js 프로젝트 폴더를 push해줍시다.만들어진 next.js 프로젝트 폴더에 들어와 터미널을 열어준뒤 해당 명령어를 입력합니다.git initgit add .git commit -m \"아무 커밋 이름\"git remote add origin '자신의 repository 주소'git push origin main만약 git이 설치되어있지 않다면, git부터 설치하셔야 합니다.정상적으로 업로드에 성공하셨다면 github에 접속시 이런 창이 뜨게 됩니다.next.js 실행정상적으로 작동되는지 테스트하기npm run dev터미널에 위 명령어를 입력하여 next.js가 정상적으로 작동되는지 확인합니다.터미널에 명령어 입력을 마쳤다면 localhost:3000에 접속시 자신의 프로젝트가 나옵니다. 가끔 localhost:3001에 접속해야 하는 경우도 있습니다.정상적으로 작동된다면 이러한 창이 뜨게 됩니다.app폴더의 page.js파일을 수정하여 프로젝트를 시작하라고 하네요.새로운 페이지app폴더에 들어와 page.js를 들어와줍니다.// src/app/page.jsexport default function Home() {  return (  )}뼈대부분만 남기고 시작해줍시다. return()안에 jsx형식으로 html작성하면 됩니다.// src/app/page.jsexport default function Home() {  return &lt;h2&gt;안녕하세요&lt;/h2&gt;;}성공.헤더 레이아웃 만들기저는 퀴즈를 작성하는 버튼과 퀴즈를 풀때 누를 버튼, 로그인/로그아웃 버튼만 헤더부분에 놓아주면 좋을 것 같습니다.모든 주소에서 레이아웃이 보이게 하려면 layout.js파일에서레이아웃을 디자인해주면 됩니다.// src/app/layout.jsexport const metadata = {  title: \"Quiz time!\",  description: \"my quiz project\",};export default function RootLayout({ children }) {  return (    &lt;html lang=\"en\"&gt;      &lt;body className={inter.className}&gt;        &lt;div className=\"header\"&gt;          &lt;Link href=\"\" className=\"title\"&gt;            Quiz time!          &lt;/Link&gt;          &lt;Link href=\"\" className=\"nav_btn\"&gt;            퀴즈 만들기          &lt;/Link&gt;          &lt;Link href=\"\" className=\"nav_btn\"&gt;            퀴즈 풀기          &lt;/Link&gt;          &lt;button onClick=\"\" className=\"login_btn\"&gt;            로그인          &lt;/button&gt;        &lt;/div&gt;        {children}      &lt;/body&gt;    &lt;/html&gt;  );}위에 title부분을 수정하면 사이트의 title이 바뀝니다.레이아웃을 만들었으니, 이제 디자인은 우리들의 조력자 gpt에게 부탁하여 global.css에 넣어줍시다./* globals.css */body {  font-family: Arial, sans-serif;  margin: 0;  padding: 0;  background-color: #f9f9f9;}.header {  background-color: #ff6b6b;  padding: 20px;  display: flex;  align-items: center;}.title {  color: #fff;  font-size: 28px;  text-decoration: none;  margin: 0;  margin-right: 20px;}.nav_btn {  color: #fff;  background-color: #5f27cd;  border: 2px solid #5f27cd;  padding: 12px 24px;  text-decoration: none;  font-size: 18px;  border-radius: 30px;  margin-left: 10px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  transition: box-shadow 0.3s ease, background-color 0.3s ease, color 0.3s ease;}.nav_btn:first-child {  margin-left: 0;}.nav_btn:hover {  background-color: #341f97;  border-color: #341f97;}.login_btn {  color: #fff;  background-color: #2ecc71;  border: none;  padding: 12px 24px;  text-decoration: none;  font-size: 18px;  border-radius: 30px;  margin-left: 10px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  transition: box-shadow 0.3s ease, background-color 0.3s ease;}.login_btn:hover {  background-color: #27ae60;}색깔을 화려하게 부탁하여 이렇게 만들었습니다. 개인적으로 만족하지만, 이런 디자인이 마음에 들지 않는다면각자 새롭게 만들어보시거나 새로 gpt에게 부탁하는것이 좋겠습니다.포스팅이 길어지니 여기서 마치고 다음 포스팅에서 계속하겠습니다.읽어주셔서 감사합니다."
  },
  
  {
    "title": "github 블로그 만들어보기_2 chirpy테마 github업로드오류",
    "url": "/posts/github-blog_2/",
    "categories": "MacOs, github blog, chirpy",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다.  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 ...",
    "content": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다.  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 github desktop이 편해 github desktop을 사용중이다.cmd로 파일 푸시$ cd '자신의 블로그 로컬 폴더 위치'먼저 자신의 블로그 파일이 있는 폴더를 선택해주고,$ git init$ git add .$ git commit -m \"아무 커밋 이름\"$ git remote add origin '자신의 repository 주소'$ git push origin main위 과정을 통해 git push를 해주자.github desktop으로 파일 푸시로그인을 하고필자가 써놓은 ‘블로그 글 게시’ 칸에 자신의 commit 이름을 정해 넣고,파란 버튼을 눌러 commit을 진행한다. 그러고 난 뒤에 origin push라는 버튼을 눌러깃허브에파일을 업로드하면 된다.github pages 만들기(테스트용으로 repository를 따로 하나 만들었습니다.)자신의 블로그 repository에 들어가 setting을 들어간뒤, branch항목에서 main/root를 선택해주어github pages 도메인을 만들어준다.로컬에선 정상작동하던 블로그가 github에서 오류가??어째서인지 chirpy테마를 적용한뒤 github에 업로드하였을때,페이지가 작동을 안한다! 🥲 다른 테마를 적용해봤을때는 이런 문제가 일어난적이 없었는데,유독 chirpy테마가 이렇게 말썽을 일으키는 듯 했다.deploy from a branch에서 github actions으로 변경아까 설정창에서 github page를 만들때, branch항목 위에 source라는 항목이 있었는데,(위 사진 참고)이것을 deploy from a branch에서 github actions로 바꾸어준다.바꾼 뒤에 이러한 항목이 나온다면, github pages jekyll 의 configure버튼을 눌러준뒤 오른쪽 위에commit버튼을 눌러준다.ruby 버전 다운그레이드ruby의 버전이 github pages 버전보다 높으면 문제가 생길수도 있다.ruby의 버전을 다운그레이드 해주면 해당 문제가 해결되었다. 마침 우리는 ruby의 버전을 관리해주는 rbenv를 미리 설치해놓았었다.$ rbenv install 2.7.4$ rbnev rehash$ rbenv global 2.7.1$ ruby --versionruby를 다운그레이드하였다고 끝이 아니다. bundle update까지 시켜주어야 완전히 끝나는것이다.$ cd '자신의 블로그 로컬 폴더 위치'$ bundle update다시 push해보기이제 github에 다시 업로드하여 블로그가 잘 작동하는지 확인해보자. git push를 하기전에 먼저 git pull을 해주고(github 웹사이트에서 commit을 한번 진행했기 때문이다.)git push를 진행해준다. 필자는 이 두개의 해결 방안을 이용해서 chirpy 테마를 적용하는데에 성공했다.기본적인것들은 모두 끝났고, 나중에 시간이 되면 설정 변경 등등 잡다한것들 다뤄보겠습니다.읽어주셔서 감사합니다."
  },
  
  {
    "title": "github 블로그 만들어보기_1 (MacOs)",
    "url": "/posts/github-blog_1/",
    "categories": "MacOs, github blog",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결합니다.구글링을 하면 다양한 개발 블로그에서 해답을 찾을 수 있는데, 블로그들을 보며 나도 개발 블로그로 다른사람에게 내가 아는것을 전달해줄 수 있다면 좋겠다는 생각이 들었습니다. 그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았습니다. tistory, ve...",
    "content": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결합니다.구글링을 하면 다양한 개발 블로그에서 해답을 찾을 수 있는데, 블로그들을 보며 나도 개발 블로그로 다른사람에게 내가 아는것을 전달해줄 수 있다면 좋겠다는 생각이 들었습니다. 그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았습니다. tistory, velog, notion 등등 다양한 종류들이 있었는데, 그중 github 블로그가 너무 멋있어 보였다. 처음 만드는게 다른 블로그보다 어렵다는 특징이 나에게는 매우 매력적으로 다가왔고, 추후 광고로 수익을 낼수도 있다고 해서 마음에 들었다.(광고를 붙일 생각은 없습니다.) 그래서 무턱대고 github 블로그 만들기를 도전하였고, 시험기간엔 뭐든 해보고 싶어진다 성공하여 이 글을 공유합니다.  저의 모든 글은 MacOs silicon을 기준으로 작성됩니다.github repository 생성github에 접속하여자신의 깃허브 아이디.github.io 로 리포지토리 이름을 정하고 만든다.캡처된 이미지에는 readme.md를 켜두지 않았지만, 확인용으로 readme.md를 켜두자.만약 이미 다른 이름으로 이름을 지어 놓았다면 설정에서 추후에 바꿔주어야 한다.생성을 하고 난 후에는 git clone으로 작업폴더를 만들어 둔다.git clone 하기깃을 설치하고 IDE의 터미널이나 cmd를 통해서 clone을 해와도 좋지만,github_desktop을 이용하여 git clone을 해오는것도 좋은 방법이다.터미널이나 cmd는 하나하나 명령어를 다 쳐줘야하는데, github_desktop은별도의 명령어 없이 버튼 몇번 딸깍딸깍하면 푸시가 되니 너무 좋았다.cmd로 git clone$ cd '자신이 작업할 폴더 주소'먼저 자신이 블로그를 작업할때 쓸 폴더를 미리 만들어두고, cmd에 그 위치를 정해둔다.$ git clone '자신의 repository 주소'그런다음 git clone으로 자신의 파일을 가져온다.readme.md파일이 날아왔다면 성공.github desktop으로 git clone설치와 로그인을 마치고, 자신이 만들어뒀던 repository를 선택하고, 밑에 파란 버튼으로 repository파일을clone해준다. 이후 이 폴더에서 생기는 변경점들은 github desktop에서 모두 확인이 가능하다.ruby 설치하기이후 cmd에서 rbenv라는 ruby 버전 관리 툴을 설치한다.$ brew update$ brew install rbenv그리고 rbenv를 통해 github pages버전에 맞게 2.7.4 ruby를 설치해준다.$ rbenv install 2.7.4$ rbenv rehash$ rbenv global 2.7.4이후 ruby가 정상적으로 설치되었는지 ruby -v를 통해 확인해본다.ruby 환경설정$ vi ~/.zshrc터미널에 해당 명령어를 입력하면 vim 편집기로 이동하게 된다.i를 눌러 insert 모드에 들어가고export PATH={$Home}/.rbenv/bin:$PATH &amp;&amp; \\eval \"$(rbenv init -)\"해당 명령어를 붙여넣기 한뒤 esc를 눌러 편집 모드를 나가고:wq를 입력하여 vim 편집기를 나가준다.jekyll 설치하기여기까지 잘 따라왔다면, 마지막 작업으로는 jekyll설치만이 남아있다.$ gem install jekylljekyll 설치 후 jekyll -v로 정상적으로 설치되었는지 확인한다.jekyll 테마 적용하고 업로드하기github에서 clone 해왔던 폴더에 jekyll 테마를 적용할것이다.나는 우선 가장 예쁘다고 느껴졌던 chirpy테마를설치하여 붙여넣기 하였다.chirpy 주소에 접속하여 zip 파일을 다운로드하고이처럼 clone해왔던 폴더에 싹다 붙여넣기 하였다.마지막으로 로컬 블로그 파일을 실행해서 잘 작동하는지 테스트 해본다.$ cd `자신의 블로그 로컬 폴더의 주소`위 명령어를 통해서 cmd에 폴더 위치를 지정해놓고,$ bundle install$ bundle exec jekyll serve명령어를 입력하여 잘 작동하는지 확인한다.성공적인 결과물.포스팅이 너무 길어지는 것 같아, github 업로드는 다음 포스팅에서 진행하겠습니다.읽어주셔서 감사합니다."
  }
  
]


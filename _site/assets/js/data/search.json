[
  
  {
    "title": "github 블로그 만들어보기_2 chirpy테마 github업로드오류",
    "url": "/posts/github-blog_2/",
    "categories": "MacOs, github blog, chirpy",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다!github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 github desktop이 편해 github desktop을 사용...",
    "content": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다!github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 github desktop이 편해 github desktop을 사용중이다.cmd로 파일 푸시$ cd '자신의 블로그 로컬 폴더 위치'먼저 자신의 블로그 파일이 있는 폴더를 선택해주고,$ git init$ git add .$ git commit -m \"아무 커밋 이름\"$ git remote add origin '자신의 repository 주소'$ git push origin master위 과정을 통해 git push를 해주자.github desktop으로 파일 푸시로그인을 하고필자가 써놓은 ‘블로그 글 게시’ 칸에 자신의 commit 이름을 정해 넣고,파란 버튼을 눌러 commit을 진행한다. 그러고 난 뒤에 origin push라는 버튼을 눌러깃허브에파일을 업로드하면 된다.github pages 만들기(테스트용으로 repository를 따로 하나 만들었습니다.)자신의 블로그 repository에 들어가 setting을 들어간뒤, branch항목에서 main/root를 선택해주어github pages 도메인을 만들어준다.로컬에선 정상작동하던 블로그가 github에서 오류가??어째서인지 chirpy테마를 적용한뒤 github에 업로드하였을때,페이지가 작동을 안한다! 🥲 다른 테마를 적용해봤을때는 이런 문제가 일어난적이 없었는데,유독 chirpy테마가 이렇게 말썽을 일으키는 듯 했다.하지만, chirpy테마가 너무 마음에 들었고, 나의 자존심을 건드렸기에 이 문제를 해결하려반나절의 시간을 쏟았고, 결국 이 문제를 해결했다.deploy from a branch에서 github actions으로 변경아까 설정창에서 github page를 만들때, branch항목 위에 source라는 항목이 있었는데,(위 사진 참고)이것을 deploy from a branch에서 github actions로 바꾸어준다.바꾼 뒤에 이러한 항목이 나온다면, github pages jekyll 의 configure버튼을 눌러준뒤 오른쪽 위에commit버튼을 눌러준다.ruby 버전 다운그레이드아직 배움이 부족한 필자는 왜 그런건진 모르겠지만 (댓글로 이유좀 알려주세요 🥲) 위 과정을 거치고 ruby 버전까지다운그레이드 해주면 해당 문제가 해결되었다. 깃허브 의존성(?)버전에 써있는 ruby의 버전을 확인해보면 2.7.4로 쓰여 있다. 필자는 3.2.2의 ruby가 설치되어있으므로 2.7.4로ruby의 버전을 다운그레이드 해주어야 할듯 하다. 마침 우리는 ruby의 버전을 관리해주는 rbenv를 미리 설치해놓았었다!$ rbenv install 2.7.4$ rbnev rehash$ rbenv global 2.7.1$ ruby --versionruby를 다운그레이드하였다고 끝이 아니다. bundle update까지 시켜주어야 완전히 끝나는것이다.$ cd '자신의 블로그 로컬 폴더 위치'$ bundle update다시 push해보기이제 github에 다시 업로드하여 블로그가 잘 작동하는지 확인해보자. git push를 하기전에 먼저 git pull을 해주고(github 웹사이트에서 commit을 한번 진행했기 때문이다.)git push를 진행해준다. 필자는 이 두개의 해결 방안을 이용해서 chirpy 테마를 적용하는데에 성공했다!마무리이 해결 방안을 사용하여도 chirpy 테마가 적용이 안되는분은 댓글로 남겨주세요. 제가 뭐 대단한 사람은 아니지만, 같이 머리를 맞대며 해결방법을 찾아보겠습니다."
  },
  
  {
    "title": "github 블로그 만들어보기_1",
    "url": "/posts/github-blog_1/",
    "categories": "MacOs, github blog",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결한다.구글링을 하면 다양한 개발 블로그의 글들을 볼수 있는데, 블로그들을 보며 나도 개발 블로그나 한번 해볼까 싶은 생각이 들었다.그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았다.tistory, velog, notion 등등 다양한 종류들이 있었는데, 그...",
    "content": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결한다.구글링을 하면 다양한 개발 블로그의 글들을 볼수 있는데, 블로그들을 보며 나도 개발 블로그나 한번 해볼까 싶은 생각이 들었다.그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았다.tistory, velog, notion 등등 다양한 종류들이 있었는데, 그중 github 블로그가 너무 멋있어 보였다.매우 어렵다는 특징이 나에게는 매우 매력적으로 다가왔고, 추후 광고로 수익을 낼수도 있다고 해서 마음에 들었다.그래서 무턱대고 github 블로그 만들기를 도전하였고, 시험기간엔 뭐든 해보고 싶어진다. 성공하여 이 글을 남기고 있다.저의 모든 글은 MacOs silicon을 기준으로 제작되었습니다.github repository 생성github에 접속하여자신의 깃허브 아이디.github.io 로 리포지토리 이름을 정하고 만든다.캡처된 이미지에는 readme.md를 켜두지 않았지만, 확인용으로 readme.md를 켜두자.만약 이미 다른 이름으로 이름을 지어 놓았다면 설정에서 추후에 바꿔주어야 한다.생성을 하고 난 후에는 git clone으로 작업폴더를 만들어 둔다.git clone 하기깃을 설치하고 터미널이나 cmd를 통해서 clone을 해와도 좋지만,github_desktop을 이용하여 git clone을 해오는것도 좋은 방법이다.터미널이나 cmd는 하나하나 명령어를 다 쳐줘야하는데, github_desktop은별도의 명령어 없이 버튼 몇번 딸깍딸깍하면 푸시가 되니 너무 좋았다.cmd로 git clone$ cd '자신이 작업할 폴더 주소'먼저 자신이 블로그를 작업할때 쓸 폴더를 미리 만들어두고, cmd에 그 위치를 정해둔다.$ git clone '자신의 repository 주소'그런다음 git clone으로 자신의 파일을 가져온다.readme.md파일이 날아왔다면 성공.github desktop으로 git clone설치와 로그인을 마치고, 자신이 만들어뒀던 repository를 선택하고, 밑에 파란 버튼으로 repository파일을clone해준다. 이후 이 폴더에서 생기는 변경점들은 github desktop에서 모두 확인이 가능하다.ruby 설치하기 (MacOs)이후 cmd에서 rbenv라는 ruby 버전 관리 툴을 설치한다.$ brew update$ brew install rbenv그리고 rbenv를 통해 작성일 기준 가장 최신 버전인 3.2.2 ruby를 설치해준다.$ rbenv install 3.2.2$ rbenv rehash$ rbenv global 3.2.2이후 ruby가 정상적으로 설치되었는지 ruby -v를 통해 확인해본다.ruby 환경설정$ vi ~/.zshrc터미널에 해당 명령어를 입력하면 vim 편집기로 이동하게 된다.i를 눌러 insert 모드에 들어가고export PATH={$Home}/.rbenv/bin:$PATH &amp;&amp; \\eval \"$(rbenv init -)\"해당 명령어를 붙여넣기 한뒤 esc를 눌러 편집 모드를 나가고:wq를 입력하여 vim 편집기를 나가준다.jekyll 설치하기여기까지 잘 따라왔다면, 마지막 작업으로는 jekyll설치만이 남아있다.$ gem install jekylljekyll 설치 후 jekyll -v로 정상적으로 설치되었는지 확인한다.jekyll 테마 적용하고 업로드하기github에서 clone 해왔던 폴더에 jekyll 테마를 적용할것이다.나는 우선 가장 예쁘다고 느껴졌던 chirpy테마를설치하여 붙여넣기 하였다.chirpy 주소에 접속하여 zip 파일을 다운로드하고이처럼 clone해왔던 폴더에 싹다 붙여넣기 하였다.마지막으로 로컬 블로그 파일을 실행해서 잘 작동하는지 테스트 해본다.$ cd `자신의 블로그 로컬 폴더의 주소`위 명령어를 통해서 cmd에 폴더 위치를 지정해놓고,$ bundle install$ bundle exec jekyll serve명령어를 입력하여 잘 작동하는지 확인한다.성공적인 결과물.포스팅이 너무 길어지는 것 같아, github 업로드는 다음 포스팅에서 진행하겠습니다.읽어주셔서 감사합니다!"
  }
  
]


[
  
  {
    "title": "퀴즈 사이트 만들기_1 (next.js)",
    "url": "/posts/Quiz_project_1/",
    "categories": "MacOs, Next.js, javascript",
    "tags": "Quiz_project",
    "date": "2023-07-25 11:33:00 +0900",
    





    
    "snippet": "시작하며방학이 찾아온 김에 게으르게 놀지 말고 무언가 하나라도 만들어봐야지 하며 시작하게 되었습니다.어떤 프로젝트를 만들면 좋을까 생각하다가, 캬훗과 비슷하지만, 다른 느낌의 퀴즈 사이트를 만들어보기로 결정했다.카훗은 혼자 퀴즈를 풀 수 없고, 그룹장이 게임을 만들어야만 퀴즈를 풀 수 있다. 나는 혼자서도 퀴즈를 풀 수 있는사이트를 제작해보면 좋을것 ...",
    "content": "시작하며방학이 찾아온 김에 게으르게 놀지 말고 무언가 하나라도 만들어봐야지 하며 시작하게 되었습니다.어떤 프로젝트를 만들면 좋을까 생각하다가, 캬훗과 비슷하지만, 다른 느낌의 퀴즈 사이트를 만들어보기로 결정했다.카훗은 혼자 퀴즈를 풀 수 없고, 그룹장이 게임을 만들어야만 퀴즈를 풀 수 있다. 나는 혼자서도 퀴즈를 풀 수 있는사이트를 제작해보면 좋을것 같다는 생각이 들었다.퀴즈 사이트에 들어갈 기능  퀴즈를 직접 작성하여 올릴수 있어야 한다.  퀴즈가 만들어지면 DB에 퀴즈가 저장되고, 퀴즈 풀기를 할때 랜덤으로 유저가 작성해놓은 퀴즈가 나온다.  한번에 풀 수 있는 퀴즈의 수를 20개로 제한해놓고, 다 풀었을 시 순위판이 나오고, 점수가 정산된다.사용할 라이브러리/DBnext.jsvercel에서 제작한 풀스택 기반 SSR렌더링 방식의 프레임워크입니다.다룰줄 아는 프레임워크가 이거밖에 없어 사용하게 되었습니다.mongodbmongodb는 noSQL계열의 데이터베이스 시스템입니다.마찬가지로 다룰줄 아는 DB가 mongodb밖에 없어 사용하게 되었습니다.시작하기node.js 설치node.js를 설치해줍시다. 최신버전과 추천버전중 아무거나 설치해줍니다.저는 이미 설치되어있으므로 설치는 건너뛰겠습니다.next.js 설치먼저 vscode를 들어온 뒤에 next.js프로젝트 폴더를 생성할 폴더에 들어와 터미널을 열어줍니다. 그 이후 터미널에 해당 명령어를 입력합니다.npx create-next-app@latest입력 후 질문이 들어오는데 y를 입력하고 엔터를 눌러줍니다.그리고 프로젝트의 이름을 지어줍니다. 저는 quiz_project로 이름을 지어주었습니다. 프로젝트 작명에는 대문자가 들어갈수 없다네요.그리고 여러가지 설정에 대한 질문이 들어오는데, 저는 딱히 특별한 기능은 사용하지 않을것이기 때문에, src디렉토리 생성과 app router기능만 활성화했습니다. 그냥 app router만 켜두셔도 무방합니다.github에 업로드가장 먼저, github에서 새로운 repository를 만들어준 뒤에, 해당 폴더를 push해줍시다.만들어진 next.js 프로젝트 폴더에 들어와 터미널을 열어준뒤 해당 명령어를 입력합니다.git initgit add .git commit -m \"아무 커밋 이름\"git remote add origin '자신의 repository 주소'git push origin main만약 git이 설치되어있지 않다면, git부터 설치하셔야 합니다.정상적으로 업로드에 성공하셨다면 github에 접속시 이런 창이 뜨게 됩니다.next.js 실행정상적으로 작동되는지 테스트하기npm run dev터미널에 위 명령어를 입력하여 next.js가 정상적으로 작동되는지 확인합니다.터미널에 명령어 입력을 마쳤다면 localhost:3000에 접속시 자신의 프로젝트가 나옵니다. 가끔 localhost:3001에 접속해야 하는 경우도 있습니다.정상적으로 작동된다면 이러한 창이 뜨게 됩니다.app폴더의 page.js파일을 수정하여 프로젝트를 시작하라고 하네요.새로운 페이지app폴더에 들어와 page.js를 들어와줍니다.&lt;!-- src/app/page.js --&gt;export default function Home() {  return (  )}뼈대부분만 남기고 시작해줍시다. return()안에 jsx형식으로 html작성하면 됩니다.&lt;!-- src/app/page.js --&gt;export default function Home() {  return &lt;h2&gt;안녕하세요&lt;/h2&gt;;}성공.헤더 레이아웃 만들기저는 퀴즈를 작성하는 버튼과 퀴즈를 풀때 누를 버튼, 로그인/로그아웃 버튼만 헤더부분에 놓아주면 좋을 것 같습니다.모든 주소에서 레이아웃이 보이게 하려면 layout.js파일에서레이아웃을 디자인해주면 됩니다.&lt;!-- src/app/layout.js --&gt;export const metadata = {  title: \"Quiz time!\",  description: \"my quiz project\",};export default function RootLayout({ children }) {  return (    &lt;html lang=\"en\"&gt;      &lt;body className={inter.className}&gt;        &lt;div className=\"header\"&gt;          &lt;Link href=\"\" className=\"title\"&gt;            Quiz time!          &lt;/Link&gt;          &lt;Link href=\"\" className=\"nav_btn\"&gt;            퀴즈 만들기          &lt;/Link&gt;          &lt;Link href=\"\" className=\"nav_btn\"&gt;            퀴즈 풀기          &lt;/Link&gt;          &lt;button onClick=\"\" className=\"login_btn\"&gt;            로그인          &lt;/button&gt;        &lt;/div&gt;        {children}      &lt;/body&gt;    &lt;/html&gt;  );}위에 title부분을 수정하면 사이트의 title이 바뀝니다.레이아웃을 만들었으니, 이제 디자인은 우리들의 조력자 gpt에게 부탁하여 global.css에 넣어줍시다.&lt;!-- global.css --&gt;body {  font-family: Arial, sans-serif;  margin: 0;  padding: 0;  background-color: #f9f9f9;}.header {  background-color: #ff6b6b;  padding: 20px;  display: flex;  align-items: center;}.title {  color: #fff;  font-size: 28px;  text-decoration: none;  margin: 0;  margin-right: 20px;}.nav_btn {  color: #fff;  background-color: #5f27cd;  border: 2px solid #5f27cd;  padding: 12px 24px;  text-decoration: none;  font-size: 18px;  border-radius: 30px;  margin-left: 10px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  transition: box-shadow 0.3s ease, background-color 0.3s ease, color 0.3s ease;}.nav_btn:first-child {  margin-left: 0;}.nav_btn:hover {  background-color: #341f97;  border-color: #341f97;}.login_btn {  color: #fff;  background-color: #2ecc71;  border: none;  padding: 12px 24px;  text-decoration: none;  font-size: 18px;  border-radius: 30px;  margin-left: 10px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  transition: box-shadow 0.3s ease, background-color 0.3s ease;}.login_btn:hover {  background-color: #27ae60;}색깔을 화려하게 부탁하여 이렇게 만들었습니다. 개인적으로 만족하지만, 이런 디자인이 마음에 들지 않는다면각자 새롭게 만들어보시거나 새로 gpt에게 부탁하는것이 좋겠습니다."
  },
  
  {
    "title": "github 블로그 만들어보기_2 chirpy테마 github업로드오류",
    "url": "/posts/github-blog_2/",
    "categories": "MacOs, github blog, chirpy",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다.github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 github desktop이 편해 github desktop을 사용...",
    "content": "들어가며1편에서 chirpy jekyll 테마를 적용하고 포스팅을 끝냈다.이제 마지막으로 github에 업로드만 하면 블로그 제작은 끝이 난다.github에 블로그 폴더 업로드github에 파일을 푸시할때는 보통 터미널,cmd를 이용하거나 github_desktop을 사용하는데,필자는 github desktop이 편해 github desktop을 사용중이다.cmd로 파일 푸시$ cd '자신의 블로그 로컬 폴더 위치'먼저 자신의 블로그 파일이 있는 폴더를 선택해주고,$ git init$ git add .$ git commit -m \"아무 커밋 이름\"$ git remote add origin '자신의 repository 주소'$ git push origin main위 과정을 통해 git push를 해주자.github desktop으로 파일 푸시로그인을 하고필자가 써놓은 ‘블로그 글 게시’ 칸에 자신의 commit 이름을 정해 넣고,파란 버튼을 눌러 commit을 진행한다. 그러고 난 뒤에 origin push라는 버튼을 눌러깃허브에파일을 업로드하면 된다.github pages 만들기(테스트용으로 repository를 따로 하나 만들었습니다.)자신의 블로그 repository에 들어가 setting을 들어간뒤, branch항목에서 main/root를 선택해주어github pages 도메인을 만들어준다.로컬에선 정상작동하던 블로그가 github에서 오류가??어째서인지 chirpy테마를 적용한뒤 github에 업로드하였을때,페이지가 작동을 안한다! 🥲 다른 테마를 적용해봤을때는 이런 문제가 일어난적이 없었는데,유독 chirpy테마가 이렇게 말썽을 일으키는 듯 했다.deploy from a branch에서 github actions으로 변경아까 설정창에서 github page를 만들때, branch항목 위에 source라는 항목이 있었는데,(위 사진 참고)이것을 deploy from a branch에서 github actions로 바꾸어준다.바꾼 뒤에 이러한 항목이 나온다면, github pages jekyll 의 configure버튼을 눌러준뒤 오른쪽 위에commit버튼을 눌러준다.ruby 버전 다운그레이드ruby의 버전이 github pages 버전보다 높으면 문제가 생길수도 있다.ruby의 버전을 다운그레이드 해주면 해당 문제가 해결되었다. 마침 우리는 ruby의 버전을 관리해주는 rbenv를 미리 설치해놓았었다.$ rbenv install 2.7.4$ rbnev rehash$ rbenv global 2.7.1$ ruby --versionruby를 다운그레이드하였다고 끝이 아니다. bundle update까지 시켜주어야 완전히 끝나는것이다.$ cd '자신의 블로그 로컬 폴더 위치'$ bundle update다시 push해보기이제 github에 다시 업로드하여 블로그가 잘 작동하는지 확인해보자. git push를 하기전에 먼저 git pull을 해주고(github 웹사이트에서 commit을 한번 진행했기 때문이다.)git push를 진행해준다. 필자는 이 두개의 해결 방안을 이용해서 chirpy 테마를 적용하는데에 성공했다.기본적인것들은 모두 끝났고, 나중에 시간이 되면 설정 변경 등등 잡다한것들 다뤄보겠습니다.읽어주셔서 감사합니다."
  },
  
  {
    "title": "github 블로그 만들어보기_1 (MacOs)",
    "url": "/posts/github-blog_1/",
    "categories": "MacOs, github blog",
    "tags": "github_blog",
    "date": "2023-05-05 11:33:00 +0900",
    





    
    "snippet": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결합니다.구글링을 하면 다양한 개발 블로그에서 해답을 찾을 수 있는데, 블로그들을 보며 나도 개발 블로그로 다른사람에게 내가 아는것을 전달해줄 수 있다면 좋겠다는 생각이 들었습니다. 그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았습니다. tistory, ve...",
    "content": "들어가며나는 작업을 하다가 모르는게 있으면 당연히 구글링을 통해서 문제를 해결합니다.구글링을 하면 다양한 개발 블로그에서 해답을 찾을 수 있는데, 블로그들을 보며 나도 개발 블로그로 다른사람에게 내가 아는것을 전달해줄 수 있다면 좋겠다는 생각이 들었습니다. 그래서 나도 한번 만들어보자 하는 생각에 블로그의 종류들을 살펴보았습니다. tistory, velog, notion 등등 다양한 종류들이 있었는데, 그중 github 블로그가 너무 멋있어 보였다. 처음 만드는게 다른 블로그보다 어렵다는 특징이 나에게는 매우 매력적으로 다가왔고, 추후 광고로 수익을 낼수도 있다고 해서 마음에 들었다.(광고를 붙일 생각은 없습니다.) 그래서 무턱대고 github 블로그 만들기를 도전하였고, 시험기간엔 뭐든 해보고 싶어진다 성공하여 이 글을 공유합니다.저의 모든 글은 MacOs silicon을 기준으로 제작되었습니다.github repository 생성github에 접속하여자신의 깃허브 아이디.github.io 로 리포지토리 이름을 정하고 만든다.캡처된 이미지에는 readme.md를 켜두지 않았지만, 확인용으로 readme.md를 켜두자.만약 이미 다른 이름으로 이름을 지어 놓았다면 설정에서 추후에 바꿔주어야 한다.생성을 하고 난 후에는 git clone으로 작업폴더를 만들어 둔다.git clone 하기깃을 설치하고 IDE의 터미널이나 cmd를 통해서 clone을 해와도 좋지만,github_desktop을 이용하여 git clone을 해오는것도 좋은 방법이다.터미널이나 cmd는 하나하나 명령어를 다 쳐줘야하는데, github_desktop은별도의 명령어 없이 버튼 몇번 딸깍딸깍하면 푸시가 되니 너무 좋았다.cmd로 git clone$ cd '자신이 작업할 폴더 주소'먼저 자신이 블로그를 작업할때 쓸 폴더를 미리 만들어두고, cmd에 그 위치를 정해둔다.$ git clone '자신의 repository 주소'그런다음 git clone으로 자신의 파일을 가져온다.readme.md파일이 날아왔다면 성공.github desktop으로 git clone설치와 로그인을 마치고, 자신이 만들어뒀던 repository를 선택하고, 밑에 파란 버튼으로 repository파일을clone해준다. 이후 이 폴더에서 생기는 변경점들은 github desktop에서 모두 확인이 가능하다.ruby 설치하기이후 cmd에서 rbenv라는 ruby 버전 관리 툴을 설치한다.$ brew update$ brew install rbenv그리고 rbenv를 통해 github pages버전에 맞게 2.7.4 ruby를 설치해준다.$ rbenv install 2.7.4$ rbenv rehash$ rbenv global 2.7.4이후 ruby가 정상적으로 설치되었는지 ruby -v를 통해 확인해본다.ruby 환경설정$ vi ~/.zshrc터미널에 해당 명령어를 입력하면 vim 편집기로 이동하게 된다.i를 눌러 insert 모드에 들어가고export PATH={$Home}/.rbenv/bin:$PATH &amp;&amp; \\eval \"$(rbenv init -)\"해당 명령어를 붙여넣기 한뒤 esc를 눌러 편집 모드를 나가고:wq를 입력하여 vim 편집기를 나가준다.jekyll 설치하기여기까지 잘 따라왔다면, 마지막 작업으로는 jekyll설치만이 남아있다.$ gem install jekylljekyll 설치 후 jekyll -v로 정상적으로 설치되었는지 확인한다.jekyll 테마 적용하고 업로드하기github에서 clone 해왔던 폴더에 jekyll 테마를 적용할것이다.나는 우선 가장 예쁘다고 느껴졌던 chirpy테마를설치하여 붙여넣기 하였다.chirpy 주소에 접속하여 zip 파일을 다운로드하고이처럼 clone해왔던 폴더에 싹다 붙여넣기 하였다.마지막으로 로컬 블로그 파일을 실행해서 잘 작동하는지 테스트 해본다.$ cd `자신의 블로그 로컬 폴더의 주소`위 명령어를 통해서 cmd에 폴더 위치를 지정해놓고,$ bundle install$ bundle exec jekyll serve명령어를 입력하여 잘 작동하는지 확인한다.성공적인 결과물.포스팅이 너무 길어지는 것 같아, github 업로드는 다음 포스팅에서 진행하겠습니다.읽어주셔서 감사합니다."
  }
  
]

